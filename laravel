cd　ディレクトリ名

php artisan serve  //laravel 起動



//1-2 アプリケーションの用意


pwd
ディレクトリの確認 

ls 

php -v

laravel -v

laravel new bbs


（ファイルツリーに追加されてる）

cd bbs(bbs=ディレクトリ名)

php artisan serve

webサーバー閉じたい->    Ctrl+C

https://localhost:8000
にて確認が可能






//1-3 基本操作の取得

cd bbs 

php artisan serve  


ファイルツリー
bbs > resources > views > welcome.php
の編集を行うことで表示を変更する。









//1-4 一言掲示板作


ルーティング
URL　　　　　　　　　　表示ページ　　　　　　　関数　　　　メソッド
/artuckles    　　　 一覧画面　　　　　     index()      get　　
/article/<id>    　　詳細画面               show()      get　
/article/new　　　　新規フォーム            new()        get　
/article　　　　　　新規作成                creaate()   post
/article/edit/<id>　　編集フォーム          edit()      get　
/article/update/<id>　　更新                update()   post
/article/<id>　　　　　　削除               delete()    delete

DB　　mybbs
table  article

データベース作成
menu   php admin  データベースを作成する　　名前つける　　日本語を使う掲示板の時->utf-8-general-ciを選択する　　作成をクリック

application に反映させるため、隠しファイルの.envを開き
DB_database = mybbs
DB_username = root    
DB_password コメントアウト
以上の設定で一行掲示板でDB利用する設定が完了。



//1-5
データベースを操作するモデルの作成
phpのオブジェクトとしていじれる
laravelでは自動生成が可能




１－４で作成したmybbsをlaravelからいじれるように.envいじったｃｄ

モデル操作するコントローラ
反映するマイクレーションも作成可能



comand
cd bbs
php artisan make:model Article -m -c-r


Controller.phpにアプリケーションの動作を書き込んでいく


bbs > app > Aeticle.php -> モデル定義したファイル　モデル継承したAeticleクラスを定義している　

myblog > app > Http > Cotrollers>ArticleController.php -> ここにコードを記述

database> migrations>~~~~~~_table.php  -> データベースを設定するためのファイル
                                            記述で反映させる　
                                            記事データ格納するコンテントを作成

               　　　　　　　　　　　　　　　　 Schema内increments下　＄table -> string('content');  を追加
                                            文字のためstring

                                            保存

保存まで完了後　ターミナルに戻り
php artisan migrate           modelの内容変更で完了

bbs 追加できたこと確認可能
動画面で挿入からサンプルデータの登録可能



＜演習課題＞×



//1-6 
ルーティングを設定（URL）

1-4参照

routes > web.php で現在のルーツを確認できる。
    追加の仕方は以下のように行う
Route::get('/articles','AeticleController@index')->name('article.list');
Route::get('/article/{id}','ArticleController@show')->name('article.show');
routingは機能がわかるように作成する。

保存後
httpsを使うようにアプリケーションの全体設定を変更する。
app > providers > appserviceProviders
内において
public funtion boot()
{
        \URL::forceScheme('https');      //httpsを使いなさい
}

以上の手順でhttpsを使用する設定が完了する


＜演習課題＞×

右の環境には、Laravelで「myblog」というアプリケーションを作ってあります。

このアプリケーションのルーティングを設定して、以下のURLで、「DiaryController」(ダイアリーコントローラ)のindexメソッドを呼び出すようにしてください。

```
https://localhost:8000/diary
```


web.phpにおいて
Route::get('/diary', 'DiaryController@index')->name('diary.list');
を挿入。






//1-7 コントローラーとビューを追加する　
ブラウザからの表示を可能にする

bbs>app>http>controllers>ArticleController.php

public function index()
    {
        return view('index');
    }

コントロールの作成ができた


viewの作成
appの見た目を定義できる
テンプレートエンジン用意されている。表示簡単に定義できる

bbs>resources>views右クリック>新規作成>ファイル名つけて作成>以下のように編集

<!doctype html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>paiza bbs</title>
        <style>body{padding:10px;}</style>
    </head>
    <body>
        <h1>paiza bbs</h1>
    </body>
</html>


https://localhost:8000/
より、ブラウザから確認が可能



public function index()
    {
        $message = 'Welcome to my BBS';
        return view('index',['message'=> $message]);
    }
コントローラーにデータを用意できた
呼び出すときに変数指定するとビュー側データを利用することができる



//1-8



controller.php

public function index()
    {
        $message = 'Welcome to my BBS';
        $article = Article::all();    //オブジェクトの ALLを指定することで、モデルがデータベースのデータまとめて取り出してくれる。
        return view('index', ['message' => $message,'articles' => $article]);
    }




index.blade.php
    <p>~~~~~</p>下
     @foreach($articles as $article)　　　　//laravelでは、関数名に＠を記述する。
            <p>{{$article -> content}}</p>　　　//contentカラムのみ取り出して格納
        @endforeach　　　　//foreachの終わりを示す




//1-9 詳細画面の作成

articleController.php

public function show (Request $request,$id,Aeticle $article)      //$request,$idを受け取っている
 {
     $message = 'This is your article'.$id;
     $article = Article::find($id);　　//idを取り出したら、showメソッドの呼び出しをする。
     return view('show',['message' => $message,'article' => $article]);
 }



コマンドプロンプト
ctrl　＋　C　でサーバーを閉じてから
 cp resources/views/index.blade.php resources/views/show.blade.php　　//cp A B AをBにコピー


 show.blade.php

修正前
 <p>{{ $message }}</p>
     @foreach($articles as $article)　　　　//laravelでは、関数名に＠を記述する。
            <p>{{$article -> content}}</p>　　　//contentカラムのみ取り出して格納
        @endforeach　


修正後
   <h1>paiza bbs</h1>
        <p>{{ $message }}</p>
        <p>{{$article -> content}}</p>
        
        <p>
            <a href={{route('article.list')}}>一覧に戻る</a>
        </p>




index.blade.php

修正前
 <p>{{ $message }}</p>
     @foreach($articles as $article)　　　　//laravelでは、関数名に＠を記述する。
            <p>{{$article -> content}}</p>　　　//contentカラムのみ取り出して格納
        @endforeach　

修正後
@foreach ($articles as $article)
            <p>
                <a href = '{{route("article.show",["id" => $article ->id])}}'>　　　//記事詳細をリンク化
                    
                {{ $article->content }}
                </a>
            </p>
        @endforeach





//2-1

MVC

モデル   ：扱うデータを保持し操作する。アプリに必要な情報DBから持ってくる。モデル通じてDB操作


ビュー　　：見える部分を作成する。モデルの情報をhtmlで記述し表示する。


コントローラー　　：モデル、ビューを呼び出し、得られた結果をブラウザに表示させる





//2-2
artisantinker:laravel有効にしたままコマンドで操作ができる。

cd bbs > php artisan tinker


参照
$aall=Article::all()  すべて
$a1= Article::find(1) 一つ目
$aall すべて

追記
 $article = new Article() 　　　オブジェクトの用意
 ↓
 $article -> content = 'Hello tinker'   オブジェクトのカラムに新しい値を代入
 ↓
 $article -> save()    データベースに保存,反映

 削除
$article->delete()   最後に追加したデータを削除




//2-3
マイグレーションでカラムを追加
articleモデルに投稿者の名前表すカラムを追加する


DB　SQLで操作する
オブジェクトでDB操作するツール＝o/rマッパー


マイグレーション(=text file)

DBの中身を一括して移行、変更する
laravelのマイグレーション機能では、DB設定ファイル自動生成して、定義や変更一度に行える。

マイグレーションは２段階で行う
１．マイグレーションファイル生成
２．１において、必要な情報をDBに適用（MySQL）

マイグレーションの取り消しを、ロールバック


カラムの変更するにはdbalが必要



マイグレーションファイルの自動生成
cd bbs > php artisan make:migration add_column_username --table=articles
完了後
bbs　> database > migrtions > 実行した日付のmigrationファイルができたことを確認できる。


upメソッド
DBに追加する項目を指定する。


downメソッド
取り消したい項目を指定


作成したmigrationファイルにカラム追加するコード記述
 public function up()
    {
        Schema::table('articles', function (Blueprint $table) {
            $table -> atring('user_name');
        });
    }

保存後、マイグレーションを実行

terminal
php artisan migrate



サンプルの作成　
$article = Aeticle::find(1)   //1を参照

$article -> user_name = 'paiza'   //user_nameに代入

$article->save()　　　//変更を保存





//2-4
モデルに追加したカラムビューで表示

web.php 　　//ルーティング示す



ArticleController.php

すべて表示する設定になっているため、変更不要


index.blade.php

  @foreach ($articles as $article)
            <p>
                <a href='{{ route("article.show", ["id" => $article->id]) }}'>
                    {{ $article->content }}
                    {{$article->user_name}}
                </a>
            </p>
        @endforeach



show.blade.php    //個別表示のビュー

<body>
        <h1>paiza bbs</h1>
        <p>{{ $message }}</p>
        <p>{{ $article->content }}</p>
        <p>{{$article->user_name}}</p>

        <p>
            <a href={{ route('article.list') }}>一覧に戻る</a>
        </p>
    </body>




//2-5
ルートの追加

webブラウザ　＞　webサーバーにリクエスト

アクセス先を自動で切り替える　　リダイレクト

Route::get('/', function () {
    return redirect('/articles');

https://localhost:8000/

articles(記事一覧)が、表示される



//2-6
データベースに書き込みをする


ルートの追加
bbs > routes > web.php

Route::get('/articles', 'ArticleController@index')->name('article.list');
Route::get('/article/{id}', 'ArticleController@show')->name('article.show');
Route::get('/article/new','ArticleController@create')->name('article.new');　　　//newの時create メソッド呼び出す




コントローラーの修正

ArticleController.php

 public function create(Request $request)
    {
        $article = new Article();
        
        $article -> content = 'Hello BBS';　　　//1
        $article -> user_name = 'paiza';      //2  1,2で固定テキストセット
        $article -> save();　　　　　　　　　　//内容をデータベースに格納
        return redirect('/articles');　　　　　//記事一覧にリダイレクト
    }



article/new >　エラー
web.php に問題あり
↓
Route::get('/articles', 'ArticleController@index')->name('article.list');
Route::get('/article/new','ArticleController@create')->name('article.new');　
Route::get('/article/{id}', 'ArticleController@show')->name('article.show');　　



記事一覧のページに、新規記事を追加するリンクを作成する
show.blade.php

 <div>
            <a href= {{ route('article.new')}}>新規投稿</a>
        </div>









//2-7
記事を削除


ルートの追加
bbs > routes > web.php

Route::get('/articles', 'ArticleController@index')->name('article.list');
Route::get('/article/new', 'ArticleController@create')->name('article.new');
Route::get('/article/{id}', 'ArticleController@show')->name('article.show');
Route::delete('/article/{id}','ArticleController@destroy') -> name('article.delete');　　　//deleteメソッドのルートを追加


コントローラーのデストロイメソッド修正
bbs > app > http > Controllers > ArticleController.php

public function destroy(Article $article)
    {
        $article = Article::find($id);
        $article -> delete();
        return redirect('/articles');
    }



削除ボタンの追加
bbs > resources > views > show.blade.php

 <p>
            <a href={{ route('article.list') }}>一覧に戻る</a>
        </p>
        {{ Form::open(['method' => 'delete', 'route' => ['article.delete', $article->id]]) }}
                {{ Form::submit('削除') }}
            {{ Form::close() }}








//3章 

//3-2　共通部分をテンプレ化する



reourcesのindexとshow.blade.phpが各画面の見掛けを定義している

index用いて作成する

 cp resources/views/index.blade.php resources/views/layout.blade.php

cp A B   //AをBにコピーする



layout.blade.php修正　　　//こいつが共通部分の中身！！！こいつ修正すれば、共通のやつ入れたページ全替わり

修正前
 <h1>paiza bbs</h1>
        <p>{{ $message }}</p>
        @foreach ($articles as $article)
            <p>
                <a href='{{ route("article.show", ["id" =>  $article->id]) }}'>
                    {{ $article->content }},
                    {{ $article->user_name }}
                </a>
            </p>
        @endforeach
        <div>
            <a href={{ route('article.new') }}>新規投稿</a>
        </div>


修正後
@yield('content')      //ここに各画面の異なる部分を埋め込む







記事一覧（index.blade.php）を修正

修正前

<!DOCTYPE html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>paiza bbs</title>
        <style>body {padding: 10px;}</style>
    </head>
    <body>
        <h1>paiza bbs</h1>
        <p>{{ $message }}</p>
        @foreach ($articles as $article)
            <p>
                <a href='{{ route("article.show", ["id" =>  $article->id]) }}'>
                    {{ $article->content }},
                    {{ $article->user_name }}
                </a>
            </p>
        @endforeach
        <div>
            <a href={{ route('article.new') }}>新規投稿</a>
        </div>
    </body>
</html>



修正後

@extends('layout')    //共通テンプレートですよ宣言

@section('content')　　　　　//ここからendsectionまでをyieldに当てはめる
<h1>paiza bbs</h1>
        <p>{{ $message }}</p>
        @foreach ($articles as $article)
            <p>
                <a href='{{ route("article.show", ["id" =>  $article->id]) }}'>
                    {{ $article->content }},
                    {{ $article->user_name }}
                </a>
            </p>
        @endforeach
        <div>
            <a href={{ route('article.new') }}>新規投稿</a>
        </div>
@endsection





詳細ページの修正(show.blade.php)

修正前

<!DOCTYPE html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>paiza bbs</title>
        <style>body {padding: 10px;}</style>
    </head>
    <body>
        <h1>paiza bbs</h1>
        <p>{{ $message }}</p>
        <p>{{ $article->content }}</p>
        <p>{{ $article->user_name }}</p>

        <p>
            <a href={{ route('article.list') }}>一覧に戻る</a>
        </p>
        <div>
            {{ Form::open(['method' => 'delete', 'route' => ['article.delete', $article->id]]) }}
                {{ Form::submit('削除') }}
            {{ Form::close() }}
        </div>
    </body>
</html>




修正後

@extends('layout')　　　　　//共通部分ぶち込みます宣言

@section('content')　　　　　　　//ここからendsectionをぶち込みますよ
        <h1>paiza bbs</h1>
        <p>{{ $message }}</p>
        <p>{{ $article->content }}</p>
        <p>{{ $article->user_name }}</p>

        <p>
            <a href={{ route('article.list') }}>一覧に戻る</a>
        </p>
        <div>
            {{ Form::open(['method' => 'delete', 'route' => ['article.delete', $article->id]]) }}
                {{ Form::submit('削除') }}
            {{ Form::close() }}
        </div>
    </body>
@endsection









//3-4  Bootstrapの適用


テンプレートファイルの作成
bbs > resources > views右クリック >　新規ファイル作成　> style-sheet.blade.php


style-sheet.blade.php編集
Bootstrapを読み込ませる

<meta name='viewport' content='width=device-width, initial-scale=1, shrink-to-fit=no'>
<link rel='stylesheet' href='https://maxcdn.bootstrapcdn.com/bootstrap/4.0.0/css/bootstrap.min.css'>
<style>body {padding-top: 80px;}</style>　　　//上部に余白




共通テンプレートにstyle-sheet.blade読み込む
layout.blade.phpを編集
ブラウザのウィンドウサイズ変更しても、比が変わらないようにbodyタグも修正する


修正前
<!DOCTYPE html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>paiza bbs</title>
        <style>body {padding: 80px;}</style>
    </head>
    <body>
        @yield('content')
    </body>
</html>



修正後
<!DOCTYPE html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>paiza bbs</title>
        @include('style-sheet')
    </head>
    <body>
        <div class='contaicer'>　　　　//Bootstrapはclass='container'の部分をいい感じにしてくれる
        @yield('content')
        </div>
    </body>
</html>






nav barの追加

views右クリック > nav.blade.php 作成
<nav class='navbar navbar-expand-md navbar-dark bg-dark fixed-top'>
    <a class='navbar-brand' href={{ route('article.list') }}>paiza bbs</a>
</nav>



nav barを共通部分として追加する

layout.balade.php

修正前
<!DOCTYPE html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>paiza bbs</title>
        @include('style-sheet')
    </head>
    <body>
        <div class='contaicer'>
        @yield('content')
        </div>
    </body>
</html>


修正後
<!DOCTYPE html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>paiza bbs</title>
        @include('style-sheet')
    </head>
    <body>
        @include('nav')
        <div class='contaicer'>
        @yield('content')
        </div>
    </body>
</html>









//3-4  Bootstrapで見栄え整えよう


tableタグで記事の一覧を表示

index.blade.php


修正後


@extends('layout')

@section('content')
    <h1>paiza bbs</h1>
    <p>{{ $message }}</p>
    <table class='table table-striped table-hover'>　　　　　　　//striped=一行ごと色変える　　　hover=マウス
    @foreach ($articles as $article)
        <tr>
            <td>
            <a href='{{ route("article.show", ["id" =>  $article->id]) }}'>
                {{ $article->content }},
                {{ $article->user_name }}
            </a>
            </td>
            <td>{{$article->user_name}}</td>
        </tr>
    @endforeach
    </table>

    <div>
        <a href={{ route('article.new') }}>新規投稿</a>
    </div>
@endsection








リンクをボタン化　（class=btn）
index.blade.php
<a href={{ route('article.new') }} class='btn btn-outline-primary'>新規投稿</a>


show.blade.php
詳細ページも


<a href={{ route('article.list') }} class='btn btn-outline-primary'>一覧に戻る</a>
    </p>
    <div>
        {{ Form::open(['method' => 'delete', 'route' => ['article.delete', $article->id]]) }}
            {{ Form::submit('削除',['class' => 'btn btn-outline-secondary']) }}
        {{ Form::close() }}




//3-4　検索フォーㇺの設置



検索タブのテンプレートを作成
viewsに新規作成
search.blade.php
{{ Form::open(['method' => 'get']) }}
    {{ csrf_field() }}
    <div class='form-group'>
        {{ Form::label('keyword', 'キーワード:') }}
        {{ Form::text('keyword', null, ['class' => 'form-control']) }}
    </div>
    <div class='form-group'>
        {{ Form::submit('検索', ['class' => 'btn btn-outline-primary'])}}
        <a href={{ route('article.list') }}>クリア</a>
    </div>
{{ Form::close() }}                //laravelでフォーム使うルール



index.blade.php

修正後
   <p>{{ $message }}</p>
    @include('search')
    
    <table class='table table-striped table-hover'>






//3-6 検索機能の実装


ArticleContoroller.php

public function index(Request $request)       //検索タブに入力した値取り出す
    {
        if($request->filled'('keyword')){　　　　　　　//検索条件に合ったものある？
            $keyword = $request -> input('keyword');
            $message = 'Welcome to my BBS:'.$keyword;
            $article = Article::where('content','like','%'.$keyword.'%')->get();　　　　//hitした記事のみ取り出している
        }else{
            $message = 'Welcome to my BBS';
        }
        $articles = Article::all();
        return view('index', ['message' => $message, 'articles' => $articles]);
    }











