cd　ディレクトリ名

php artisan serve  //laravel 起動



//1-2 アプリケーションの用意


pwd
ディレクトリの確認 

ls 

php -v

laravel -v

laravel new bbs


（ファイルツリーに追加されてる）

cd bbs(bbs=ディレクトリ名)

php artisan serve

webサーバー閉じたい->    Ctrl+C

https://localhost:8000
にて確認が可能






//1-3 基本操作の取得

cd bbs 

php artisan serve  


ファイルツリー
bbs > resources > views > welcome.php
の編集を行うことで表示を変更する。









//1-4 一言掲示板作


ルーティング
URL　　　　　　　　　　表示ページ　　　　　　　関数　　　　メソッド
/artuckles    　　　 一覧画面　　　　　     index()      get　　
/article/<id>    　　詳細画面               show()      get　
/article/new　　　　新規フォーム            new()        get　
/article　　　　　　新規作成                creaate()   post
/article/edit/<id>　　編集フォーム          edit()      get　
/article/update/<id>　　更新                update()   post
/article/<id>　　　　　　削除               delete()    delete

DB　　mybbs
table  article

データベース作成
menu   php admin  データベースを作成する　　名前つける　　日本語を使う掲示板の時->utf-8-general-ciを選択する　　作成をクリック

application に反映させるため、隠しファイルの.envを開き
DB_database = mybbs
DB_username = root    
DB_password コメントアウト
以上の設定で一行掲示板でDB利用する設定が完了。



//1-5
データベースを操作するモデルの作成
phpのオブジェクトとしていじれる
laravelでは自動生成が可能




１－４で作成したmybbsをlaravelからいじれるように.envいじったｃｄ

モデル操作するコントローラ
反映するマイクレーションも作成可能



comand
cd bbs
php artisan make:model Article -m -c-r


Controller.phpにアプリケーションの動作を書き込んでいく


bbs > app > Aeticle.php -> モデル定義したファイル　モデル継承したAeticleクラスを定義している　

myblog > app > Http > Cotrollers>ArticleController.php -> ここにコードを記述

database> migrations>~~~~~~_table.php  -> データベースを設定するためのファイル
                                            記述で反映させる　
                                            記事データ格納するコンテントを作成

               　　　　　　　　　　　　　　　　 Schema内increments下　＄table -> string('content');  を追加
                                            文字のためstring

                                            保存

保存まで完了後　ターミナルに戻り
php artisan migrate           modelの内容変更で完了

bbs 追加できたこと確認可能
動画面で挿入からサンプルデータの登録可能



＜演習課題＞×



//1-6 
ルーティングを設定（URL）

1-4参照

routes > web.php で現在のルーツを確認できる。
    追加の仕方は以下のように行う
Route::get('/articles','AeticleController@index')->name('article.list');
Route::get('/article/{id}','ArticleController@show')->name('article.show');
routingは機能がわかるように作成する。

保存後
httpsを使うようにアプリケーションの全体設定を変更する。
app > providers > appserviceProviders
内において
public funtion boot()
{
        \URL::forceScheme('https');      //httpsを使いなさい
}

以上の手順でhttpsを使用する設定が完了する


＜演習課題＞×

右の環境には、Laravelで「myblog」というアプリケーションを作ってあります。

このアプリケーションのルーティングを設定して、以下のURLで、「DiaryController」(ダイアリーコントローラ)のindexメソッドを呼び出すようにしてください。

```
https://localhost:8000/diary
```


web.phpにおいて
Route::get('/diary', 'DiaryController@index')->name('diary.list');
を挿入。






//1-7 コントローラーとビューを追加する　
ブラウザからの表示を可能にする

bbs>app>http>controllers>ArticleController.php

public function index()
    {
        return view('index');
    }

コントロールの作成ができた


viewの作成
appの見た目を定義できる
テンプレートエンジン用意されている。表示簡単に定義できる

bbs>resources>views右クリック>新規作成>ファイル名つけて作成>以下のように編集

<!doctype html>
<html>
    <head>
        <meta charset='utf-8'>
        <title>paiza bbs</title>
        <style>body{padding:10px;}</style>
    </head>
    <body>
        <h1>paiza bbs</h1>
    </body>
</html>


https://localhost:8000/
より、ブラウザから確認が可能



public function index()
    {
        $message = 'Welcome to my BBS';
        return view('index',['message'=> $message]);
    }
コントローラーにデータを用意できた
呼び出すときに変数指定するとビュー側データを利用することができる



//1-8



controller.php

public function index()
    {
        $message = 'Welcome to my BBS';
        $article = Article::all();    //オブジェクトの ALLを指定することで、モデルがデータベースのデータまとめて取り出してくれる。
        return view('index', ['message' => $message,'articles' => $article]);
    }




index.blade.php
    <p>~~~~~</p>下
     @foreach($articles as $article)　　　　//laravelでは、関数名に＠を記述する。
            <p>{{$article -> content}}</p>　　　//contentカラムのみ取り出して格納
        @endforeach　　　　//foreachの終わりを示す




//1-9 詳細画面の作成

articleController.php

public function show (Request $request,$id,Aeticle $article)      //$request,$idを受け取っている
 {
     $message = 'This is your article'.$id;
     $article = Article::find($id);　　//idを取り出したら、showメソッドの呼び出しをする。
     return view('show',['message' => $message,'article' => $article]);
 }



コマンドプロンプト
ctrl　＋　C　でサーバーを閉じてから
 cp resources/views/index.blade.php resources/views/show.blade.php　　//cp A B AをBにコピー


 show.blade.php

修正前
 <p>{{ $message }}</p>
     @foreach($articles as $article)　　　　//laravelでは、関数名に＠を記述する。
            <p>{{$article -> content}}</p>　　　//contentカラムのみ取り出して格納
        @endforeach　


修正後
   <h1>paiza bbs</h1>
        <p>{{ $message }}</p>
        <p>{{$article -> content}}</p>
        
        <p>
            <a href={{route('article.list')}}>一覧に戻る</a>
        </p>




index.blade.php

修正前
 <p>{{ $message }}</p>
     @foreach($articles as $article)　　　　//laravelでは、関数名に＠を記述する。
            <p>{{$article -> content}}</p>　　　//contentカラムのみ取り出して格納
        @endforeach　

修正後
@foreach ($articles as $article)
            <p>
                <a href = '{{route("article.show",["id" => $article ->id])}}'>　　　//記事詳細をリンク化
                    
                {{ $article->content }}
                </a>
            </p>
        @endforeach
